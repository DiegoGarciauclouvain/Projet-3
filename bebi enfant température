from microbit import *
import radio

# Configuration de la radio
radio.on()
radio.config(group=23, channel=2, address=0x11111111)  # Assurez-vous que les configurations sont identiques
KEY = "ahfurixkrunwcsuflency"  # Clé fictive pour l'exemple

def vigenere(message, key, decryption=False):
    text = ""
    key_length = len(key)
    key_as_int = [ord(k) for k in key]

    for i, char in enumerate(str(message)):
        if char.isalpha():
            key_index = i % key_length
            if decryption:
                modified_char = chr((ord(char.upper()) - key_as_int[key_index] + 26) % 26 + ord('A'))
            else: 
                modified_char = chr((ord(char.upper()) + key_as_int[key_index] - 26) % 26 + ord('A'))
            if char.islower():
                modified_char = modified_char.lower()
            text += modified_char
        elif char.isdigit():
            key_index = i % key_length
            if decryption:
                modified_char = str((int(char) - key_as_int[key_index]) % 10)
            else:  
                modified_char = str((int(char) + key_as_int[key_index]) % 10)
            text += modified_char
        else:
            text += char
    return text

def measure_temperature():
    return temperature()

def main():
    while True:
        packet = radio.receive()
        if packet:
            decrypted_packet = vigenere(packet, KEY, decryption=True)
            try:
                message_type, length, content = decrypted_packet.split('|')
                if message_type == "REQ" and content == "TMP":
                    temp = measure_temperature()
                    response = vigenere("TEMP|3|" + str(temp), KEY)  # Envoi de la température sous forme complète
                    radio.send(response)
            except ValueError:
                pass  # Ignore les messages mal formés

main()

