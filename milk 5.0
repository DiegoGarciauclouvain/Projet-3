from microbit import *
import time
import radio


radio.on()
radio.config(group=23, channel=2, address=0x11111111)
microkey= "ahfurixkrunwcsuflency"  

# Variables for dose and settings
doses = 0
max_doses = 10

# Maximum inactivity time in milliseconds
MAX_INACTIVITY_TIME = 30000  # 30 seconds
last_activity_time = time.ticks_ms()  # Record last activity time
lightsOn = True  # Variable to control the display state (on/off)

# Function to display doses
def afficher_doses():
    if doses == 0:
        display.clear()  # Clear display if no doses
    else:
        display.show(str(doses))  # Show the number of doses

# Function to add a dose
def ajouter_dose():
    global doses
    if doses < max_doses:
        doses += 1
    afficher_doses()

# Function to remove a dose
def supprimer_dose():
    global doses
    if doses > 0:
        doses -= 1
    afficher_doses()

# Function to reset doses
def reinitialiser_doses():
    global doses
    doses = 0
    display.clear()  # Clear display when doses are reset
    afficher_doses()

# Function to handle inactivity (turn off display if idle)
def check_inactivity():
    global last_activity_time, lightsOn
    if time.ticks_ms() - last_activity_time >= MAX_INACTIVITY_TIME:
        if lightsOn:  # If display is on
            display.clear()  # Turn off display
            lightsOn = False  # Update screen status
    else:
        if not lightsOn:  # If display is off but there's activity
            lightsOn = True  # Turn display back on
            afficher_doses()  # Show doses

# Function to reset inactivity timer
def reset_inactivity_timer():
    global last_activity_time
    last_activity_time = time.ticks_ms()  # Reset activity timer
def create_tlv_message(type_id, value):
    """
    Crée un message TLV.
    :param type_id: Type de la donnée (int)
    :param value: Valeur (str ou bytes)
    :return: Message TLV sous forme de bytes
    """
    if isinstance(value, str):
        value = value.encode('utf-8')  # Convertir en bytes si nécessaire
    length = len(value)
    return bytes([type_id, length]) + value
def parse_tlv_message(data):
    """
    Analyse un message TLV reçu.
    :param data: Données reçues (bytes)
    :return: Tuple (type, length, value)
    """
    if len(data) < 2:
        return None  # Message invalide
    type = data[0]
    length = data[1]
    value = data[2:2+length]
    return [type, length, value] 
# Vigenère cipher for encryption and decryption
def vigenere(message, key, decryption=False):
    text = ""
    key_length = len(key)
    key_as_int = [ord(k) for k in key]

    for i, char in enumerate(str(message)):
        if char.isalpha():  # Encrypt/Decrypt alphabetic characters
            key_index = i % key_length
            if decryption:
                modified_char = chr((ord(char.upper()) - key_as_int[key_index] + 26) % 26 + ord('A'))
            else:
                modified_char = chr((ord(char.upper()) + key_as_int[key_index] - 26) % 26 + ord('A'))
            if char.islower():
                modified_char = modified_char.lower()
            text += modified_char
        elif char.isdigit():  # Encrypt/Decrypt numeric characters
            key_index = i % key_length
            if decryption:
                modified_char = str((int(char) - key_as_int[key_index]) % 10)
            else:
                modified_char = str((int(char) + key_as_int[key_index]) % 10)
            text += modified_char
        else:
            text += char
    return text

# Function to measure the temperature
def measure_temperature():
    return temperature()

def baby_state():
    # Check if the sound level is low (0 <= sound_level < 80)
    if 0 <= sound_level < 80:
        return "calm"     
    
    # Check if the sound level is moderate (80 <= sound_level < 150)
    elif 80 <= sound_level < 150:
        return "normal"
    # Check if the sound level is high (sound_level >= 150)
    else:
        return "angry"  

# Main loop
while True:
    # Check inactivity
    check_inactivity()

    # Handle button presses
    if button_a.is_pressed() and button_b.is_pressed():
        start_time = time.ticks_ms()  # Start time when both buttons are pressed
        while button_a.is_pressed() and button_b.is_pressed():
            if time.ticks_ms() - start_time >= 1000:  # If held for 1 second
                reinitialiser_doses()  # Reset doses
                break
        reset_inactivity_timer()  # Reset inactivity timer
        sleep(500)  # Wait to avoid multiple button presses

    elif button_a.is_pressed():
        ajouter_dose()  # Add a dose when Button A is pressed
        reset_inactivity_timer()  # Reset inactivity timer
        sleep(500)  # Wait to avoid multiple presses

    elif button_b.is_pressed():
        supprimer_dose()  # Remove a dose when Button B is pressed
        reset_inactivity_timer()  # Reset inactivity timer
        sleep(500)  # Wait to avoid multiple presses

    # If logo is touched, show temperature
    if pin_logo.is_touched():
        display.scroll(temperature())

    # Automatically reset doses if max is reached
    if doses == max_doses:
        reinitialiser_doses()

    # Radio message handling
    msg = radio.receive_bytes()
    if msg:
        msg = parse_tlv_message(msg)
        if msg:
            msg[2].decode('utf-8')
            if(msg[0] is 0x01):
                break
            elif (msg[0] is 0x02):
                msg[2]=vigenere(msg[2],"ahfurixkrunwcsuflency",True)
                if msg[2]== 'milk':
                    msg=vigenere(str(doses),microkey,False)
                    msg=create_tlv_message(0x03,msg)
                    radio.send_bytes(msg)
                if msg[2]== 'state':
                    msg=vigenere(baby_state(),microkey,False)
                    msg=create_tlv_message(0x03,msg)
                    radio.send_bytes(msg)
                if msg[2]== 'temperature':
                    msg=vigenere(baby_state(),microkey,False)
                    msg=create_tlv_message(0x02,msg)
                    radio.send_bytes(msg)
            else:
                display.show(int(msg[2]))  # Show received dose number on display

    # Always update display if lights are on
    if lightsOn:
        afficher_doses()

    
    sound_level = microphone.sound_level()

        
    packet = radio.receive()
    if packet:
        decrypted_packet = vigenere(packet, microkey, decryption=True)
        try:
            message_type, length, content = decrypted_packet.split('|')
            if message_type == "REQ" and content == "TMP":
                temp = measure_temperature()
                response = vigenere("TEMP|3|" + str(temp), microkey)  # Envoi de la température sous forme complète
                radio.send_bytes()
        except ValueError:
            pass  # Ignore les messages mal formés
