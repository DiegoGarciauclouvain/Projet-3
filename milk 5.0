from microbit import *
import time
import radio
import music

radio.on()
radio.config(group=23, channel=2, address=0x11111111)
KEY = "ahfurixkrunwcsuflency"  

# Variables for dose and settings
doses = 0
max_doses = 10

# Maximum inactivity time in milliseconds
MAX_INACTIVITY_TIME = 30000  # 30 seconds
last_activity_time = time.ticks_ms()  # Record last activity time
lightsOn = True  # Variable to control the display state (on/off)

# Function to display doses
def afficher_doses():
    if doses == 0:
        display.clear()  # Clear display if no doses
    else:
        display.show(str(doses))  # Show the number of doses

# Function to add a dose
def ajouter_dose():
    global doses
    if doses < max_doses:
        doses += 1
    afficher_doses()

# Function to remove a dose
def supprimer_dose():
    global doses
    if doses > 0:
        doses -= 1
    afficher_doses()

# Function to reset doses
def reinitialiser_doses():
    global doses
    doses = 0
    display.clear()  # Clear display when doses are reset
    afficher_doses()

# Function to handle inactivity (turn off display if idle)
def check_inactivity():
    global last_activity_time, lightsOn
    if time.ticks_ms() - last_activity_time >= MAX_INACTIVITY_TIME:
        if lightsOn:  # If display is on
            display.clear()  # Turn off display
            lightsOn = False  # Update screen status
    else:
        if not lightsOn:  # If display is off but there's activity
            lightsOn = True  # Turn display back on
            afficher_doses()  # Show doses

# Function to reset inactivity timer
def reset_inactivity_timer():
    global last_activity_time
    last_activity_time = time.ticks_ms()  # Reset activity timer

# Vigenère cipher for encryption and decryption
def vigenere(message, key, decryption=False):
    text = ""
    key_length = len(key)
    key_as_int = [ord(k) for k in key]

    for i, char in enumerate(str(message)):
        if char.isalpha():  # Encrypt/Decrypt alphabetic characters
            key_index = i % key_length
            if decryption:
                modified_char = chr((ord(char.upper()) - key_as_int[key_index] + 26) % 26 + ord('A'))
            else:
                modified_char = chr((ord(char.upper()) + key_as_int[key_index] - 26) % 26 + ord('A'))
            if char.islower():
                modified_char = modified_char.lower()
            text += modified_char
        elif char.isdigit():  # Encrypt/Decrypt numeric characters
            key_index = i % key_length
            if decryption:
                modified_char = str((int(char) - key_as_int[key_index]) % 10)
            else:
                modified_char = str((int(char) + key_as_int[key_index]) % 10)
            text += modified_char
        else:
            text += char
    return text

# Function to measure the temperature
def measure_temperature():
    return temperature()

# Main loop
while True:
    # Check inactivity
    check_inactivity()

    # Handle button presses
    if button_a.is_pressed() and button_b.is_pressed():
        start_time = time.ticks_ms()  # Start time when both buttons are pressed
        while button_a.is_pressed() and button_b.is_pressed():
            if time.ticks_ms() - start_time >= 1000:  # If held for 1 second
                reinitialiser_doses()  # Reset doses
                break
        reset_inactivity_timer()  # Reset inactivity timer
        sleep(500)  # Wait to avoid multiple button presses

    elif button_a.is_pressed():
        ajouter_dose()  # Add a dose when Button A is pressed
        reset_inactivity_timer()  # Reset inactivity timer
        sleep(500)  # Wait to avoid multiple presses

    elif button_b.is_pressed():
        supprimer_dose()  # Remove a dose when Button B is pressed
        reset_inactivity_timer()  # Reset inactivity timer
        sleep(500)  # Wait to avoid multiple presses

    # If logo is touched, show temperature
    if pin_logo.is_touched():
        display.scroll(temperature())

    # Automatically reset doses if max is reached
    if doses == max_doses:
        reinitialiser_doses()

    # Radio message handling
    msg = radio.receive()
    if msg:
        msg = msg.split("|")
        if isinstance(msg[0], str):  # Check if the first part is a string
            msg[2] = vigenere(msg[2], KEY, True)  # Decrypt the message
            if msg[2] == "milk":  # If message is "milk"
                radio.send(str(doses))  # Send the current dose count
                sleep(1000)
        else:
            display.show(int(msg[2]))  # Show received dose number on display

    # Always update display if lights are on
    if lightsOn:
        afficher_doses()

    # Sound level detection and display updates
    sound_level = microphone.sound_level()

    if 0 <= sound_level < 80:
        # Respond to 'baby etat' message with 'fine' if sound level is low
        msg = radio.receive()
        if msg == 'baby etat':
            radio.send('fine')
                          
    elif 80 <= sound_level < 150:
        # Respond to 'baby etat' message with 'normal' if sound level is moderate
        msg = radio.receive()
        if msg == 'baby etat':
            radio.send('normal')  
    else:
        # Respond to 'baby etat' message with 'angry' if sound level is high
        radio.send('angry')
        sleep(5000)  #

    def measure_temperature():
        return temperature()
            
        
    packet = radio.receive()
    if packet:
        decrypted_packet = vigenere(packet, KEY, decryption=True)
        try:
            message_type, length, content = decrypted_packet.split('|')
            if message_type == "REQ" and content == "TMP":
                temp = measure_temperature()
                response = vigenere("TEMP|3|" + str(temp), KEY)  # Envoi de la température sous forme complète
                radio.send(response)
        except ValueError:
            pass  # Ignore les messages mal formés
